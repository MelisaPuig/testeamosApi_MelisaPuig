{
  "stats": {
    "suites": 1,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2022-07-28T19:12:47.470Z",
    "end": "2022-07-28T19:12:48.313Z",
    "duration": 843,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f949646a-50a0-4de2-a55d-0b7b91ce9e00",
      "title": "",
      "fullFile": "C:\\Users\\Matias\\Desktop\\clase42\\test\\api.test.js",
      "file": "\\test\\api.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "002f8404-b2be-4a26-b240-09b7834931b0",
          "title": "API REST de productos ",
          "fullFile": "C:\\Users\\Matias\\Desktop\\clase42\\test\\api.test.js",
          "file": "\\test\\api.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "debe devolver productos.",
              "fullTitle": "API REST de productos  debe devolver productos.",
              "timedOut": false,
              "duration": 93,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getAllProductsRequest = await request.get(\"/\");\nexpect(getAllProductsRequest.statusCode).eql(200);\nexpect(getAllProductsRequest.body.result.length).greaterThan(0);",
              "err": {},
              "uuid": "c1908667-d705-4f5e-9237-84d7b7493480",
              "parentUUID": "002f8404-b2be-4a26-b240-09b7834931b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "debe devolver un producto específico según su ID.",
              "fullTitle": "API REST de productos  debe devolver un producto específico según su ID.",
              "timedOut": false,
              "duration": 193,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getAllProductsRequest = await request.get(\"/\");\nconst firstProduct = getAllProductsRequest.body.result[0];\nconst firstProductId = firstProduct.id;\nconst getProductByIdRequest = await request.get(`/${firstProductId}`);\nexpect(getProductByIdRequest.statusCode).eql(200);\nexpect(getProductByIdRequest.body.result.id).eql(firstProductId);\nexpectProductKeys(getProductByIdRequest.body.result);",
              "err": {},
              "uuid": "5d07739a-adca-4612-9473-774bb35846cc",
              "parentUUID": "002f8404-b2be-4a26-b240-09b7834931b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "debe agregar producto específicado.",
              "fullTitle": "API REST de productos  debe agregar producto específicado.",
              "timedOut": false,
              "duration": 159,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newProduct = getNewProduct();\nconst { title, price, thumbnail } = newProduct;\nconst addProductRequest = await request.post(\"/\").send(newProduct);\nexpect(addProductRequest.statusCode).eql(200);\nconst result = addProductRequest.body.result;\nexpectProductKeys(result);\nexpect(result.nombre).eql(title);\nexpect(result.precio).eql(price);\nexpect(result.foto).eql(thumbnail);\naddedProductId = result.id;",
              "err": {},
              "uuid": "fd49c08d-854e-411c-a9c0-0fd4883b864d",
              "parentUUID": "002f8404-b2be-4a26-b240-09b7834931b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "debe modificar el producto especificado.",
              "fullTitle": "API REST de productos  debe modificar el producto especificado.",
              "timedOut": false,
              "duration": 245,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (addedProductId === -1) {\n  throw new Error(`No se ha creado el producto esperado.`);\n}\nconst productData = getNewProduct();\nproductData.title = \"NEW title\";\nconst updateProductRequest = await request\n  .put(`/${addedProductId}`)\n  .send(productData);\nconst { title, price, thumbnail } = productData;\nexpect(updateProductRequest.statusCode).eql(200);\nconst result = updateProductRequest.body.result;\nexpectProductKeys(result);\nexpect(result.nombre).eql(title);\nexpect(result.precio).eql(price);\nexpect(result.foto).eql(thumbnail);",
              "err": {},
              "uuid": "092a354a-40fa-4c36-bed5-9b110394c34d",
              "parentUUID": "002f8404-b2be-4a26-b240-09b7834931b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "debe eliminar el producto especificado.",
              "fullTitle": "API REST de productos  debe eliminar el producto especificado.",
              "timedOut": false,
              "duration": 125,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (addedProductId === -1) {\n  throw new Error(`No se ha creado el producto esperado.`);\n}\nconst deleteRequest = await request.delete(`/${addedProductId}`);\nexpect(deleteRequest.statusCode).eql(200);",
              "err": {},
              "uuid": "b9057e7c-b75c-433b-8d63-669525c62b08",
              "parentUUID": "002f8404-b2be-4a26-b240-09b7834931b0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c1908667-d705-4f5e-9237-84d7b7493480",
            "5d07739a-adca-4612-9473-774bb35846cc",
            "fd49c08d-854e-411c-a9c0-0fd4883b864d",
            "092a354a-40fa-4c36-bed5-9b110394c34d",
            "b9057e7c-b75c-433b-8d63-669525c62b08"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 815,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}